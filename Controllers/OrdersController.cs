using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using project_backend.Dtos.OrderDtos;
using project_backend.Models.OrderModels;

namespace project_backend
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class OrdersController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly IMapper _mapper;

        public OrdersController(AppDbContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }

        // GET: api/orders
        /// <summary>
        /// Retrieves a list of all orders.
        /// </summary>
        /// <returns>
        /// A list of all existing orders in the system.
        /// </returns>
        /// <response code="200">Returns the list of orders</response>
        [HttpGet]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public async Task<ActionResult<IEnumerable<OrderReadDto>>> GetAllOrders()
        {
            var orders = await _context.Orders.ToListAsync();
            var orderReadDto = _mapper.Map<IEnumerable<OrderReadDto>>(orders);

            return Ok(orderReadDto);
        }

        // GET: api/orders/{id}
        /// <summary>
        /// Retrieves a specific order by its unique identifier.
        /// </summary>
        /// <param name="id">The unique GUID of the order.</param>
        /// <returns>
        /// <list type="bullet">
        ///   <item><description><see cref="StatusCodes.Status200OK"/> – Returns the requested order.</description></item>
        ///   <item><description><see cref="StatusCodes.Status404NotFound"/> – The order with the specified ID if not found </description></item>
        /// </list>
        /// </returns>
        /// <response code="200">Returns the requested order</response>
        /// <response code="404">If the order with the specified ID is not found</response>
        [HttpGet("{id:guid}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<ActionResult<Order>> GetOrder(Guid id)
        {
            var order = await _context.Orders.FindAsync(id);
            if (order == null) return NotFound("Order not found");

            var orderReadDto = _mapper.Map<OrderReadDto>(order);

            return Ok(orderReadDto);
        }

        // POST: api/orders
        /// <summary>
        /// Creates a new order with a specified customer and book.
        /// </summary>
        /// <param name="orderCreateDto">
        /// The order to be created. Must include valid CustomerId and BookId. 
        /// The Id will be generated by the server.
        /// </param>
        /// <returns>
        /// <list type="bullet">
        ///   <item><description><see cref="StatusCodes.Status201Created"/> – The order was successfully created and returned.</description></item>
        ///   <item><description><see cref="StatusCodes.Status400BadRequest"/> – The request body is invalid, or required fields are missing.</description></item>
        ///   <item><description><see cref="StatusCodes.Status404NotFound"/> – The specified <c>CustomerId</c> or <c>BookId</c> does not exist.</description></item>
        /// </list>
        /// </returns>
        /// <response code="201">The order was successfully created.</response>
        /// <response code="400">Invalid order data or missing required fields.</response>
        /// <response code="404">Referenced customer or book was not found.</response>
        /// <remarks>
        /// The Id of the order is generated by the server. 
        /// </remarks>
        [HttpPost]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<ActionResult<OrderReadDto>> CreateOrder([FromBody] OrderCreateDto orderCreateDto)
        {
            var customer = await _context.Customers.FindAsync(orderCreateDto.CustomerId);

            if (customer == null)
            {
                return NotFound("CustomerId does not exist");
            }

            var book = await _context.Books.FindAsync(orderCreateDto.BookId);

            if (book == null)
            {
                return NotFound("BookId does not exist");
            }

            var order = _mapper.Map<Order>(orderCreateDto);

            // Ensure ID is generated server-side
            order.Id = Guid.NewGuid();

            await _context.Orders.AddAsync(order);
            await _context.SaveChangesAsync();

            var orderReadDto = _mapper.Map<OrderReadDto>(order);

            return CreatedAtAction(nameof(GetOrder), new { id = orderReadDto.Id }, orderReadDto);
        }

        // DELETE: api/orders/{id}
        /// <summary>
        /// Deletes an existing order by its unique identifier.
        /// </summary>
        /// <param name="id">The unique identifier (GUID) of the order to delete.</param>
        /// <returns>
        /// <list type="bullet">
        ///   <item><description><see cref="StatusCodes.Status204NoContent"/> – The order was successfully deleted.</description></item>
        ///   <item><description><see cref="StatusCodes.Status404NotFound"/> – No order was found with the specified ID.</description></item>
        /// </list>
        /// </returns>
        /// <response code="204">The order was successfully deleted.</response>
        /// <response code="404">No order was found with the provided ID.</response>
        /// <remarks>
        /// This endpoint requires a valid GUID representing the order ID in the route.
        /// </remarks>
        [HttpDelete("{id:guid}")]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<IActionResult> DeleteOrder(Guid id)
        {
            var order = await _context.Orders.FindAsync(id);
            if (order == null)
            {
                return NotFound("Order not found");
            }

            _context.Orders.Remove(order);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        // PUT: api/orders/{id}
        /// <summary>
        /// Updates an existing order with new details.
        /// </summary>
        /// <param name="id">The unique identifier (GUID) of the order to update. Must match the <c>Id</c> property in the request body.</param>
        /// <param name="orderUpdateDto">The updated order data. Must include valid <c>CustomerId</c> and <c>BookId</c>.</param>
        /// <returns>
        /// <list type="bullet">
        ///   <item><description><see cref="StatusCodes.Status200OK"/> – The order was successfully updated and returned.</description></item>
        ///   <item><description><see cref="StatusCodes.Status400BadRequest"/> – The route ID does not match the order ID in the request body.</description></item>
        ///   <item><description><see cref="StatusCodes.Status404NotFound"/> – No order exists with the provided ID, or the customer/book does not exist.</description></item>
        ///   <item><description><see cref="StatusCodes.Status500InternalServerError"/> – An internal error occurred during the update, potentially due to a database issue.</description></item>
        /// </list>
        /// </returns>
        /// <response code="200">The order was successfully updated and returned.</response>
        /// <response code="400">The ID in the URL does not match the ID in the order body.</response>
        /// <response code="404">No order was found with the provided ID or specified customer/book does not exist.</response>
        /// <response code="500">An internal error occurred while updating the order.</response>
        /// <remarks>
        /// This endpoint requires authentication.
        /// Ensure valid <c>CustomerId</c> and <c>BookId</c> are provided in the request body.
        /// </remarks>
        [HttpPut("{id:guid}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<ActionResult<OrderReadDto>> UpdateOrder(Guid id, [FromBody] OrderUpdateDto orderUpdateDto)
        {
            // Ensure the route ID and body ID match
            if (id != orderUpdateDto.Id)
            {
                return BadRequest("The ID in the URL does not match the order ID.");
            }

            // Check if the order exists
            var existingOrder = await _context.Orders.FindAsync(id);
            if (existingOrder == null)
            {
                return NotFound("Order not found");
            }

            // Check if the customer and book exists
            var newCustomer = await _context.Customers.FindAsync(orderUpdateDto.CustomerId);
            if (newCustomer == null)
            {
                return NotFound("The customer does not exist");
            }

            var newBook = await _context.Books.FindAsync(orderUpdateDto.BookId);
            if (newBook == null)
            {
                return NotFound("The book does not exist");
            }

            // Update fields with automapper
            _mapper.Map(orderUpdateDto, existingOrder);

            try
            {
                // Entity is already tracked, no need to call _context.Update();
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateException e)
            {
                return StatusCode(500, $"An error occurred while updating the order: {e.Message}");
            }

            var orderReadDto = _mapper.Map<OrderReadDto>(existingOrder);

            return Ok(orderReadDto);
        }

        // GET: api/orders/search?bookid=BookId&customerid=CustomerId
        /// <summary>
        /// Searches for orders using optional Book ID and/or Customer ID criteria.
        /// </summary>
        /// <param name="searchCriteria">An object containing BookId and CustomerId parameters for filtering orders.</param>
        /// <returns>
        /// <list type="bullet">
        ///   <item><description><see cref="StatusCodes.Status200OK"/> – Orders found matching the criteria.</description></item>
        ///   <item><description><see cref="StatusCodes.Status404NotFound"/> – No matching orders found.</description></item>
        /// </list>
        /// </returns>
        /// <response code="200">Matching orders were found and returned.</response>
        /// <response code="404">No orders matched the provided search criteria.</response>
        /// <remarks>
        /// This endpoint requires authentication.
        /// </remarks>
        [HttpGet("search")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<ActionResult<IEnumerable<OrderReadDto>>> SearchOrder([FromQuery] OrderSearch searchCriteria)
        {
            if (searchCriteria.CustomerId == null && searchCriteria.BookId == null)
            {
                return BadRequest("At least one of 'CustomerId' or 'BookId' must be provided for search.");
            }

            var filteredOrders = _context.Orders.AsQueryable();

            if (!string.IsNullOrEmpty(searchCriteria.CustomerId.ToString()))
            {
                filteredOrders = filteredOrders.Where(b =>
                    EF.Functions.Like(b.CustomerId.ToString(), $"%{searchCriteria.CustomerId}%")
                );
            }

            if (!string.IsNullOrEmpty(searchCriteria.BookId.ToString()))
            {
                filteredOrders = filteredOrders.Where(b =>
                    EF.Functions.Like(b.BookId.ToString(), $"%{searchCriteria.BookId}%")
                );
            }

            var orders = await filteredOrders.ToListAsync();

            if (!orders.Any())
            {
                return NotFound("No orders found with the given search criteria.");
            }

            var orderReadDtos = _mapper.Map<IEnumerable<OrderReadDto>>(orders);

            return Ok(orderReadDtos);
        }
    }
}